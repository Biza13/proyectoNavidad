name: CI/CD a tope

# Evento para que se deployee cuando se hace el push
# on:
#   push:
#     branches:
#       - main

# Este evento es para que solo se deployee si se lo digo manualmente
on:
  workflow_dispatch:

jobs:
  # Job para desplegar infraestructura de Terraform
  despliegue:
    runs-on: ubuntu-latest
    
    outputs:
      bucket_nombre: ${{ steps.capturar_bucket.outputs.bucket_nombre }}
      ecr_repository_uri_url: ${{ steps.capturar_ecr_uri_url.outputs.ecr_repository_uri_url }}
      
    steps:
      # Este paso copia lo que hay en la rama main en la máquina virtual de Ubuntu
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: "us-east-1"
          
      # Este paso es para instalar Terraform en la máquina virtual
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        id: init
        run: terraform init
        working-directory: ./ArchivosTf
       
      - name: Plan Terraform
        run: terraform plan
        working-directory: ./ArchivosTf
  
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./ArchivosTf

      # Capturar los outputs de Terraform y hacerlos como outputs del job
      - name: Capturar output de Terraform (Bucket)
        id: capturar_bucket
        run: echo "bucket_nombre=$(terraform output -raw s3)" >> "$GITHUB_OUTPUT"

      - name: Capturar URI del repositorio ECR
        id: capturar_ecr_uri_url
        run: echo "ecr_repository_uri_url=$(terraform output -raw ecr_repository_uri_url)" >> "$GITHUB_ENV"

      - name: Subir tfstate al bucket de S3
        run: aws s3 cp terraform.tfstate s3://$(terraform output -raw s3) --region us-east-1

  # Segundo job para crear una imagen de Docker y subirla a la ECR
  creacion-y-subida-de-imagen:
    runs-on: ubuntu-latest
    needs: despliegue

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configurar credenciales de AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: "us-east-1"
      
      # Logearse en la ECR
      - name: Logearse en AWS ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ needs.despliegue.outputs.ecr_repository_uri_url }}

      # Construir la imagen Docker
      - name: Construir imagen Docker
        run: docker build -t img-apacheNodeNpm .

      # Etiquetar la imagen Docker
      - name: Etiquetar imagen Docker
        run: docker tag img-apacheNodeNpm:latest ${{ needs.despliegue.outputs.ecr_repository_uri_url }}:latest  

      # Subir la imagen Docker a ECR
      - name: Subir imagen Docker a ECR
        run: docker push ${{ needs.despliegue.outputs.ecr_repository_uri_url }}:latest
