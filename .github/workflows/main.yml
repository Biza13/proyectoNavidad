name: CI/CD a tope

#evento para que se deployee cuando se hace el push
#on:
#  push:   #evento a hacer en este caso cuando hagamos un push
#    branches:   #en la rama main
#      - main

#Este evento es para que solo se deployee si se lo digo manualmente
on:
 workflow_dispatch:

jobs:
#job para desplegar infraestructura de terraform
  despliegue:   #nombre del job
    runs-on: ubuntu-latest
    
    outputs:
      bucket_nombre: ${{ steps.capturar_bucket.outputs.bucket_nombre }}
      ecr_repository_uri_url: ${{ steps.capturar_ecr_uri_url.outputs.ecr_repository_uri_url }}
      
    steps:   #pasos
          #este paso copia lo que hay en la rama main en la maquina virtual de ubuntu (lo de arriba)
          
      - name: Checkout   #nombre del action
        uses: actions/checkout@v4  #en el apartado de la derecha buscar el nombre del anterior aprametro y ponerle el uso (copiar y pegar)
      
      - name: Configurar credenciales aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: "us-east-1"  # Cambia a la región de AWS que estás usando
          
      #este paso es para instalar terraform en la maquina virtual
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        id: init
        run: terraform init  
        working-directory: ./ArchivosTf
       
      - name: Plan Terraform
        id: plan
        run: terraform plan -var 'public_key=${{ secrets.DEPLOYER_PUBLIC_KEY }}'
        working-directory: ./ArchivosTf
  
      - name: Terraform Apply
        env:
         #definido previamente otro secreto con la clave publica deployer-key.pub
         #run: terraform apply -auto-approve -var "public_key=${{ env.public_key }}"
         TF_VAR_deployer_public_key: ${{ secrets.DEPLOYER_PUBLIC_KEY }}
         run: terraform apply -auto-approve -var 'public_key=${{ secrets.DEPLOYER_PUBLIC_KEY }}'
        working-directory: ./ArchivosTf

      #capturar los outputs de terraform y hacerlos como outputs del job para poder usarlos en otros jobs
      - name: Capturar output de Terraform (Bucket)
        id: capturar_bucket
        run: echo "bucket_nombre=$(terraform output -raw s3)" >> "$GITHUB_OUTPUT"
        #working-directory: ./ArchivosTf

      - name: Capturar URI del repositorio ECR
        id: capturar_ecr_uri_url
        run: echo "ecr_repository_uri_url=$(terraform output -raw ecr_repository_uri_url)" >> "$GITHUB_ENV"
        #working-directory: ./ArchivosTf

      - name: Subir tfstate al bucket de S3
        run: aws s3 cp terraform.tfstate s3://$(terraform output -raw s3) --region us-east-1
        #working-directory: ./ArchivosTf

  #segundo job para crear una imagen de docker y subirla a la ecr
  creacion-y-subida-de-imagen:
    runs-on: ubuntu-latest
    needs: despliegue

    steps:

      - name: Checkout code
        uses: actions/checkout@v4 

      - name: Configurar credenciales de AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: "us-east-1" 
      
      #logearse en la ecr necesitamos el id de nuestra cuenta que esta en iam, panel y a la derecha
      - name: logearnos en aws ecr
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ needs.despliegue.outputs.ecr_repository_uri_url }}

      #construir la imagen Docker
      - name: Construir imagen Docker
        run: docker build -t img-apacheNodeNpm .

      #etiquetar la imagen Docker
      - name: Etiquetar imagen Docker
        run: docker tag img-apacheNodeNpm:latest ${{ needs.despliegue.outputs.ecr_repository_uri_url }}:latest  

      #subir la imagen Docker a AWS ECR
      - name: Subir imagen Docker a ECR
        run: docker push ${{ needs.despliegue.outputs.ecr_repository_uri_url }}:latest    
